코딩 자율학습 HTML+CSS+JavaScript

8.1 자바스크립트 코드 작성 방법

8.1.1 HTML 파일과 자바스크립트 연결하기
    내부 스크립트, 외부 스크립트 2가지
    ● 내부 스크립트방법 : 내부 스크립트는 HTML 파일에서 script 태그의 콘텐츠 영역에서 자바스크립트 코드를 작성하는 방법
        <body>
            <script>
                document.write("내부 스크립트 방법");
            </script>
        </body>
    ● 외부 스크립트 방법 : js 확장자로 된 별도의 파일을 생성하고 생성한 파일에 자바 스크립트 코드를 작성한뒤 , HTML과 연결하는 방법
        <body>
          <script src="script.js"></script>
        </body>
    ● script 태그 사용위치
      script 태그는 항상 body 태그의 종료 태그 바로 전에 사용. 이는 내부 외부 모두 동일

8.1.2 자바스크립트 코드 실행하기
    document.write() : 웹브라우저에 텍스트를 표시해 주는 코드
    console.log() : 에디터에서 실행할때

8.2 프로그래밍 시작 전 알아두기

8.2.1 주석
    한줄만 주석일때 : //
    여러줄 주석: /* */

8.2.2 자바스크립트 오류 확인 방법
    컴파일 방식과 인터프리터 방식이 있다
    컴파일 방식: 코드를 실행하기 전에 모든 코드를 컴퓨터가 이해할 수 있는 기계어로 한번 변환한 후 실행
    인터프리터 방식 : 코드를 한번에 한줄씩 실행하는 방식
    자바스크립트는 인터프리터 방식 : 오류가 발생한 시점과 줄번호를 알려주고 오류 발생시점부터 실행을 멈춘다.
    자바스크립트에서 오류가 발생하면 크롬의 개발자 도구에서 확인 가능

----------------------------------------------------------------------------------------------------------------------------
마무리
1. 자바스크립트 코드 작성 방법
    1) 자바 스크립트를 웹 브라우저에 적용하는 방법은 크게 2가지
        내부스크립트 방법 : HTML문서안에서 script 태그의 콘텐츠 영역에 자바 스크립트 코드를 작성하는 방법
        외부스크립트 방법 : 별도의 js확장자 파일을 만들어 자바스크립트 코드를 작성하고 이 파일을 HTML 문서에서 script태그로 연결하는 방법
        script 태그의 사용 위치 : script 태그는 웹 브라우저에 화면이 표시되는 것에 영향을 미치지 않도록 body 태그가 끝나기 전에 사용
    2) 자바 스크립트를 단순히 실행할 목적이라면 웹브라우저의 개발자 도구에서 지원하는 콘솔창 활용하기, VSCode의 Code Runner 확장 프로그램 활용하기

2. 주석
    1) 한줄주석은 //
    2) 여러줄 주석은 /* */

3. 오류 확인 방법
    자바스크립트는 코드가 한번에 한줄씩 실행되는 인터프리터 기반의 언어.
    그래서 오류가 발생하면 그 즉시 실행을 멈추고 오류가 발생한 줄 번호를 웹브라우저의 콘솔창에 출력
    따라서 모든 오류 관련 메세지는 웹브라우저의 콘솔창에서 확인 할 수 있음. (~329)　　
----------------------------------------------------------------------------------------------------------------------------

9.1 변수와 상수
    데이터를 저장하는 공간을 변수와 상수라고 한다

9.1.1 변수
    변수는 변하는 수

         식별자     표현식<-값(30)
    var   num   =   10 + 20 ;
    키워드      연산자

    ● 키워드
      어떤 역할이나 기능이 정해진 특별한 단어. 다른말로는 '예약어' 라고도 한다.
    ● 식별자
      내부에서 변수, 함수 등에 부여되는 이름을 의미, 키워드는 식별자로 사용할 수 없음
    ● 연산자
      이름 그대로 어떠한 연산작업을 하는데 사용하는 기호
      = 기호는 우변에 있는 데이터를 좌변에 할당하는 역할을 하기 때문에 할당연산자라고 한다
    ● 표현식
      평가(표현식을 실행해 하나의 값을 만드는 과정)되어 하나의 값을 반환하는 식 또는 코드
    ● 값
      더 이상 평가 할수 없는 데이터
    ● 세미콜론
      하나의 문법이 끝났음을 의미
    ● 선언, 할당, 초기화
      변수를 생성하고 값을 저장하는 문법에서 var 키워드나 let, const 키워드를 사용해 변수의 식별자를 지정하는
      행위를 '변수를 선언한다' 라고한다.
      그리고 할당 연산자인 = 기호로 우변에 있는 값을 변수 공간에 대입(저장)하는 것을 '값을 할당한다' 라고 한다.
      변수는 초기에 값을 할당하지 않고 선언만 할 수 있다
      ex) var num;
      또 선언과 할당을 한번에 하면 '변수를 초기화한다'고 한다
      var num = 10 + 20 ; //변수 num을 초기화한다

9.1.2 새로운 변수 선언 키워드 let
    let num = 10 + 20;

    var와 let의 차이
    1. 변수명 중복이 불가능하다
       var는 중복해서 생성가능
             var num = 10 + 20;
             var num = 50;
       이렇게 하면 기존에 할당된 10+20이라는 데이터가 사라지고 50이라는 새로운 값이 할당된다
       let의 경우 밑에 처럼하면 에러난다.
             let num = 10+20;
             let num = 50;

    2. 호이스팅되지 않는다
       호이스팅은 var 키워드로 변수를 선언하고 할당했을 때, 변수 선언을 자바스크립트의 스코프 맨위로 올려 실행하는 것을 말한다
             console.log(num)
             var num = 10;
             결과 : undefinded
         오류가 발생해야 맞지만 오류가 아니라 undefined를 출력한다 이유는?
             var num; // 선언이 최상위로 올라옴
             console.log(num)
             num = 10; // 할당은 원래 자리에 있음
         호이스팅에 의해 선언부가 최상위로 올라간다 그러나 let에서는 호이스팅이 일어나지 않는다
         같은 코드를 작성하고 실행하면 num변수가 정의되지 않았다는 오류가 발생한다.

9.1.3 상수
    변수를 선언할 때 사용하는 키워드로 const도 있다
    기본은 let과 같다
    다른점은 const는 재할당이 안된다는 것이다

    상수는 보통 변하지 않는수를 의미 const는 재할당이 안되는 특징때문에 상수변수를 선언할때 사용하는 키워드라고 하기도한다.
    예를들어 다음과 같이 let키워드는 변수를 선언하고 다른값으로 재할당 할 수 있다
        let num = 0;
        num = 30;
        console.log(num);
        //실행결과 30

    그러나 const 키워드는 재할당할 수 없어서 오류가 발생한다.
        const num = 10;
        num = 30;
        console.log(num);
    TypeError: Assignment to constant variable.

    재할당이 안되기 때문에 선언을 먼저하고 할당을 나중에 하는 것도 안된다.
        const num; // 선언을 먼저 하고
        num = 10; // 할당을 나중에 해도 오류가 난다.
    SyntaxError: Missing initializer in const declaration

9.1.4 식별자 명명 규칙
    표기법                   설명                      예
    카멜표기법        변수명과 함수명 작성시 사용      firstName,lastName
    언더스코어표기법    상수명 작성 시 사용           FIRST_NAME, last_name
    파스칼표기법       생성자 함수명 작성 시 사용     FirstName, LastName

9.2 자료형
    기본자료형과 참조자료형으로 구별
    기본자료형 : 문자, 숫자, 논리, undefined, null, symbol
    참조자료형 : 객체

9.2.1 문자열
    큰 따옴표나 작은따옴표로 둘러싸인 값의 형태
        let string1 = 'Hello, World';
        let string2 = "Hello, World";
    문자열 데이터를 정의할때 큰따옴표로 시작했으면 큰따옴표로 끝나야 하고 작은 따옴표로 시작했으면 작은따옴표로 끝나야한다.

        ● 문자열에 따옴표가 포함된 경우
            작성하려는 문자열에 퐇마되지 않은 따옴표로 문자열을 감싸서 정의
            문자에 작은 따옴표가 포함되어있다면 큰따옴표로 감싸고 큰따옴표가 포함되어있다면 작은따옴표로 감싼다.
                let string1 = '문자열은 큰따옴표(")로 감싸면 된다'
                let string2 = "문자열은 큰따옴표(')로 감싸면 된다";
            그러나 문자열에 작은 따옴표가 둘다 포함되어 있다면 이걸로 해결되지 않는다.
            그럴때 문자열 연결연산자(+) 또는 이스케이프 문자로 해결

        ● 문자열 연결 연산자
            let string = ' 문자열 ' + " 연결 연산자 "; // 문자열 연결 연산자
            let string = '문자열은 큰따옴표(")나' + "작은따옴표(')로 감싸면 된다."; // 잇문자열은 큰따옴표(")나작은따옴표(')로 감싸면 된다.

         ● 이스케이프 문자
            웹브라우저는 문자열에 들어있는 큰따옴표나 작은따옴표에 역슬래시를 붙이면 일반적인 따옴표로 인식한다.
            let string = '문자열은 큰따옴표(")나 작은따옴표(\')로 감싸면 된다';
            // 문자열은 큰따옴표(")나 작은따옴표(')로 감싸면 된다

            이스케이프 문자          설명
            \'                  작은따옴표
            \"                  큰따옴표
            \n                  줄바꿈
            \t                  수평 탭
            \\                  역슬래시

            let string = "이스케이프 문자를 이용해서\n줄 바꿈하고 싶어";
            // 이스케이프 문자를 이용해서
               줄 바꿈하고 싶어

         ● 템플릿 문자열
            백틱(``) : 1옆에 있는거 영어일때만 나옴
            기준 문자열 정의 방식처럼 큰 따옴표나 작은 따옴표로 문자열을 정의하지 않기 때문에 문자열에 큰따옴표나 작은 따옴표가 있어도 영향을 받지 않는다.
            템플릿 문자열의 특징
             1. enter를 눌렀을때 줄바꿈이 적용된다. 그래서 이스케이프 문자안써도 된다
                    let string = `문자열은 큰따옴표(")나
                    작은따옴표(')로 감싸면 된다`
                    // 문자열은 큰따옴표(")나
                       작은따옴표(')로 감싸면 된다
             2. ${} 문법을 이용해 문자열에 변수 또는 식을 넣을 수 있다.
                외부에 미리 정의한 변수 또는 표현식을 넣어 연산한 값을 변수에 할당
                    let dan = 3;
                    let gugu = 8;
                    let string = `${dan} 곱하기 ${gugu}은 ${dan * gugu}입니다.`;
                    // 3 곱하기 8은 24입니다.

9.2.2 숫자형
    정수와 실수를 구분하지않고 하나의 자료형으로 취급
        let num1 = 10;
        let num2 = 0.1;
        // 10
           0.1
    그러나 실수를 사용할 때는 주의해야함 실수를 부동 소수점 방식으로 표현하면 실수 계산이 정확하지 않다.
        let sum = 0.1 + 0.2;
        // 0.30000000000000004

9.2.3 논리형
    true, false
        let boolean1 = 10 < 20;
        let boolean2 = 10 > 20;
        // true
           false

9.2.4 undefined
    변수나 상수를 메모리 공간에 선언하면 반드시 생성한 공간에 저장할 데이터를 할당해야한다.
    할당하지 않을경우 자바스크립트 내부적으로 변수와 상수공간에 임시로 데이터를 할당하는데, 이때 할당되는값이 undefined
    사용자가 임의로 정의하고 할당하는 자료형이 아니다.
        let empty;
        console.log(empty); // undefined

9.2.5 null
    null자료형은 null값하나만 있다. 변수나 상수를 선언하고 의도적으로 선언한 공간을 비워 둘때 할당한다.
        let empty = null;
        console.log(empty); //null

9.2.6 객체
    배열, 객체 리터럴, 함수가 있다.
        ● 배열
            배열로 정의한 데이터를 '요소'라고 한다.
            그리고 배열 요소에 접근하려면 '인덱스'를 사용한다.
                let studentScore = [80, 70, 90,60]; // 국어, 영어, 수학, 과학 점수
                console.log(studentScore[1]); //70, 1번 인덱스의 데이터에 접근
            배열은 모든 자료형을 저장할 수 있다.

        ● 객체 리터럴
            객체를 정의하는 가장 간단한 방법. 중괄호를 사용.
            중괄호 안에는 키(key)와 값(value)의 한쌍으로 이루어진 속성(property)이 들어간다
                {
                         속성
               키 →    key1:value1  ← 값
               키 →   ,key2:value2  ← 값
                         속성
                }
            값을 키로 구분한다는 장점이 있다.
            키가 있기때문에 각 값의 의미를 바로 파악할 수 있다.
                let studentScore = {
                    koreanScore: 80
                    , englishScore: 70
                    , mathScore: 90
                    , scienceScore: 60
                };
                console.log(studentScore.koreanScore);     //80
                console.log(studentScore['englishScore']); //70

9.3 연산자
    이항산술연산자(+,-,*,/,%,**)
        ** : x ** y x와 y의 거듭제곱을 구한다.
    단항부정
        - : -x x의 부호를 보정한다(음수면 양수로 양수면 음수로)

9.3.3 비교 연산자
    연산자         예               설명
    ==         x == y    x와 y의 값이 같으면 true를 반환
    ===        x === y   x와 y의 자료형이 같으면 true를 반환
    !==        x !== y   x와 y의 값과 자료형이 다르면 true를 반환

9.3.4 논리 연산자
    연산자         예               설명
     !           !x    x가 참이면 false를 반환하고 거짓이면 true를 반환한다

9.3.7 형 변환
    데이터의 자료형이 다른 자료형으로 바뀌는 것
    암시적 형변환과 명시적 형변환이 있다.

        ● 암시적형변환
            const result = 10 + "10";
            console.log(result); //1010
          자바스크립트가 내부적으로 숫자형 데이터를 문자열 데이터로 형 변환했기 때문
          암시적 형 변환은 사용자가 의도하지 않았지만 자바스크립트에서 자체적으로 형변환 하는 것
          은근 많이씀
            let num = 10;
            let strNum = "10";
            if(num == strNum){ //문자열을 숫자형으로 형 변환
                console.log('equals');
            } //equals

        ● 명시적 형변환
            드러나게 형변환을 처리하는 것
            예를 들어 다음처럼 String()메서드를 사용하면 문자열을 숫자형으로 명시적 형 변환을 할 수 있다.
                let num = 10;
                let strNum = "10";
                if (String(num) == strNum){
                    console.log('equals'); //equals
                }

9.5.6 for...in
    형식
        for(가변수 in 배열/객체 리터럴){
        // 블록문
        }
    for문안의 소괄호 안에 in키워드를 두고 키워드의 오른쪽에는 탐색의 대상이 되는 배열 또는 객체리터럴
    왼쪽에는 배열 또는 객체리터럴을 탐색해서 키를 저장할 가변수(임시변수)를 놓는다.

    ● 객체리터럴을 반복할 경우
        let obj = {name:"철수", age:"20"};
        for (let key in obj){
            console.log(key + ": ", obj[key]);
        }
      for in 문으로 객체 리터럴을 반복 탐색하면 탐색 결과로 가변수에 객체 리터럴의 키가 할당되어 객체 리터럴의 키와 값을 출력할 수 있다.

    ● 배열을 반복할 경우
        let arr = ["orange","apple","banana"];
        for (let index in arr){
            console.log(index +": " + arr[index]);
        }
        // 0: orange
        // 1: apple
        // 2: banana
-----------------------------------------------------------------------------------------------------------------------
마무리
    1. 변수와 상수 변수
        자바스크립트에서 데이터를 저장할 수 있는 공간을 변수와 상수 변수라고 한다.
        변수는 변할 수 있는 데이터를 저장하는 공간,
        상수변수는 재할당할 수 없는 데이터를 저장하는 공간
    2. 자료형
        기본자료형
            문자열: 큰따옴표나 작은따옴표로 둘러싸인 값
            숫자형: 정수, 실수를 포함한 모든 숫자
            논리형: 논리값 (true, false)
            undefined: 변수에 아무런 값도 할당되지 않는 상태를 나타내는 값
            null: 변수를 의도적으로 비워두기 위해 사용하는 값
        참조자료형
            객체: 배열, 함수, 객체리터럴 등으로 파생되는 상위자료형
    3. 연산자
        + - * / % ** ++ -- = += -= == != 등등
    4. 연산자 우선순위
        필요하면 인터넷 검색
    5. 조건문
        if, switch
    6. 반복문
        while, do...while, for, for...in
    7. break, continue
        반복문을 종료할때 break, 건너뛰게 할때는 continue
-----------------------------------------------------------------------------------------------------------------------

10.1 함수란?
    어떤목적을 가지고 작성한 코드를 모아 둔 블록문이다.
    코드를 함수로 만들면 함수를 호출해 함수내부에 모아 둔 여러줄의 코드를 한번에 실행할 수 있다.
    그래서 여러곳에서 재사용하기가 편하다.
    3단을 반복문으로 만들면
        for (let i = 0; i<=9; i++){
            console.log(`3 * ${i} = ${3*i}`);
        }
    반복문으로 작성하면 3줄이된다.
    이걸 만약 여러곳에서 쓴다면?
    이 상태에서 3단이 아니라 9단을 출력해야하는 상황이 생긴다면?
    일일히 수정해야 하기때문에 어려워짐
    이럴때 함수로 묶으면 편리하다
        function gugudan(){ // 함수시작
            for (let i = 0; i<=9; i++){
                console.log(`3 * ${i} = ${3*i}`);
            }
        } //함수 끝
    블록문을 function 키워드 식별자 소괄호와 함께 묶으면 함수가 생성되는데 이를 함수를 정의한다. 라고 한다
    이렇게 함수를 정의하면 함수를 호출시키기만 하면된다.

10.2 함수를 정의하면 방법
    함수선언문, 함수표현식, 화살표함수 등을 사용해 정의한다.

10.2.1 함수 선언문으로 함수 정의하기
    형식
        function 식별자 () {}
    {}중괄호에는 함수가 호출되면 실행할 코드를 적어준다.
    코드는 길이, 갯수의 제한이 없다
    나중에 함수명(); 으로 실행 가능

10.2.2 함수표현식으로 함수 정의하기
    함수도 변수에 할당할 수 있다.
    함수에 식별자가 있으면 '네이밍함수' 없으면 '익명함수' 로 구별한다.
    형식
        const 변수명 = function(){}; // 익명함수
        const 변수명 = function 식별자 (){}; // 네이밍함수

        함수선언문으로 정의한 gugudan() 함수를 함수표현식으로 바꾸면 이렇게 한다.
            네이밍함수
                const gugudan = function gugudan(){
                    for (let i = 0; i<=9; i++){
                        console.log(`3 * ${i} = ${3*i}`);
                    }
                };
                gugudan(); // 함수호출

        단, 함수 선언문과는 다르게 function 키워드 다음에 오는 식별자로 함수를 호출하지 않고, 할당한 변수명으로 호출
        그래서 다음처럼 function 키워드 다음에 식별자가 없는 익명 함수도 함수를 호출하는데 문제가 없다.
            익명함수
                const gugudan = function (){
                    for (let i = 0; i<=9; i++){
                        console.log(`3 * ${i} = ${3*i}`);
                    }
                };
                gugudan(); // 함수호출 문제없음

        만약 function 키워드 다음에 오는 함수 식별자로 호출하면 어떻게 될까?
                const gugudan = function naming (){
                    for (let i = 0; i<=9; i++){
                        console.log(`3 * ${i} = ${3*i}`);
                    }
                };
                naming(); // 호출안됨 naming is not defined

        naming 변수가 정의되지 않았다는 참조 오류가 남. 따라서 함수표현식으로 함수를 정의할때는
        function 키워드 다음에 오는 식별자가 아니라 변수명으로 호출해야 한다.

        함수표현식으로 함수를 정의할때는 const 키워드를 주로 사용한다. let, var로 해도 되지만
        const로 하는것이 좋다. 왜냐하면
        보통 함수는 일관된 목적을 가진 코드의 집합이라서 재정의해서도, 재할당해서도 안되는 경우가 많기 때문이다.
        (함수표현식으로 함수를 정의할때는 네이밍함수로 하는 것이 좋다. 또한 네이밍함수의 식별자를 변수명과 똑같이 만들면
         이름을 번생각하지 않아도 되고 호출할때도 헷갈리지 않아서 좋다.)

10.3 함수 기능 확장하기

10.3.1 매개변수와 인수
    매개변수(parameter) 인수(argument)
        매개변수 : 함수를 정의할때 외부에서 전달하는 데이터를 함수에서 받을 수 있도록 정의하는 변수
        인수 : 정의한 함수를 호출할때 소괄호 안에 전달하고 싶은 데이터를 적는것
    매개변수는 제한없이 여러개를 만들 수 있고 여러개일때는 쉼표로 구분해 나열하면 된다. 함수를 호출할때는 인수 또한 매개변수의 갯수에 맞춰 작성

    형식
    // 함수 선언문
        function 함수명(매개변수1, 매개변수2, ..., 매개변수N) {};
    // 함수 표현식
        const 함수명 = function 식별자(매개변수1, 매개변수2, ..., 매개변수N){};
    // 화살표 함수
        const 함수명 = (매개변수1, 매개변수2, ..., 매개변수N) => {};
    // 함수 호출
        함수명(인수1, 인수2, ..., 인수N);

    //코드
        // 화살표 함수
        //dan = 매개변수
        const gugudan1st = (dan) => {
          for (let i=1; i <= 9; i++){
              console.log(`${dan} * ${i} = ${dan * i}`);
          }
        }

        // 함수 선언문
        function gugudan2nd(dan){
            for (let i = 1; i <= 9; i++){
                console.log(`${dan} * ${i} = ${dan * i}`);
            }
        }

        // ()안에 3,6,9가 인수
        gugudan1st(3); // 3단 출력
        gugudan2nd(6); // 6단 출력
        gugudan2nd(9); // 9단 출력

    이렇게 매개변수와 인수를 사용하면 함수를 확장해서 좀더 폭넓게 사용할 수 있다.

10.3.2 매개변수의 특징

    ● 데이터 전달
        일대일 대응한다. 첫번째 인수는 첫번째 매개변수에 할당되고 두번째 인수는 두번째 매개변수에 할당된다.
                 숫자 10 전달   숫자 20 전달
        function sum(num1,      num2){}
        sum(10, 20);

      매개변수는 변수의 특징을 그대로 가지고 있다.
      변수를 선언하고 값을 할당하지 않으면 undefined값으로 초기화되는것처럼 매개변수도 함수호출시 데이터를 전달하지 않으면 undefined값이 할당된다.
        function sum( num1,          num2){}
        sum(10, 20);  ↑ undefined  ↑ undefined

      함수를 호출할때 데이터를 전달하지만 매개변수가 정의되지않은경우에는 아래처럼된다.
          function sum(){}       매개변수가 없어도 오류는 안난다
          sum(10, 20);           단 전달한 데이터를 받을 변수가 없어서 값을 전달해도 사용 x

      화살표 함수 매개변수 정의
        const sum = (num1, num2) => {
            console.log(num1, num2);
        };
        sum(10,20);
      단 화살표함수는 매개변수가 1개일 경우는 () 생략이 가능하다
        const sum = num1 => {
            console.log(num1);
        };
        sum(10);

    ● 기본값 할당
        기본값을 지정하는 방식이 있다.
        매개변수에 직접 데이터를 할당하는 방식으로 단순하게 기본값을 지정할 수 있다
            function sum (a = 10, b = 10){
                console.log(a,b);
            }
            sum(); // 10, 10

    ● return 문
        함수를 호출할 때 데이터를 전달하려면 매개변수를 정의해야 하듯이 함수 외부로 데이터를 반환할때는 return문을 사용해야 한다.
            형식
                return 식(또는 값)

            내부에서 result 변수를 참조해 값을 출력하는 코드
                function sum(num1, num2){
                    let result = num1 + num2;
                    console.log("inner: " +result);
                }
                sum(10,20); // 30

            이 코드를 바꾸면 오류가 발생한다
                function sum(num1, num2){
                     let result = num1 + num2;
                }
                sum(10,20);
                console.log("out:  " +result); // ReferenceError: result is not defined
            정의되지 않는 변수 오류.
            함수 외부에서 내부의 변수를 참조하려고 해서 발생한 오류

            오류가 나지 않게 하려면 return문으로 함수 내부데이터를 함수 외부로 전달해야 한다.
                 function sum(num1, num2){
                     let result = num1 + num2;
                     return result;
                 }
                 const result = sum(10,20);
                 console.log("out: " +result); //out: 30
            sum 함수의 내부변수인 result가 return 문에 작성되어 있다.
            이렇게하면 함수내부 변수인 result에 할당한 값, 즉 데이터가 sum() 함수를 호출한 곳으로 전달된다.
            이를 '반환한다' 라고 하며 이때 반환된 데이터를 '반환값' 이라고 한다.
            이렇게 반환된 데이터를 함수 외부에서 사용하려면 함수 호출 부분에서 반환값을 다시 변수에 할당해야 한다.
            만약 호출 부분에서 변수에 할당하지 않으면 반환값을 사용할 수 없으므로 return 문 사용할 필요없다.

            데이터를 반환할때 return 문에 꼭 변수를 써야하는건아니고 표현식으로도 데이터 반환 가능하다
                function sum(num1, num2){
                    return num1 + num2; // return문에 꼭 변수가 없어도 표현식으로도 데이터 반환가능
                }
                const result = sum(10,20);
                console.log("out: "+result); //out: 30

            return문은 데이터를 반환하지않으면 단순하게 함수 실행을 종료하는 역할만 한다.
            함수 내부에서 데이터를 반환하지 않는 return 문을 만나면 return 문 다음에 코드가 있어도 함수실행을 즉시 종료하고 undefined를 반환한다.

            화살표함수와 return 문
                화살표 함수에서 {}을 생략하면 화살표 다음에 오는 코드는 return문으로 처리된다
                예를들어 다음코드는 매개변수 num1, num2의 합을 즉시 반환한다.
                    const sum = (num1, num2) => num1 + num2;
                    const result = sum(10, 20); // 30
                    console.log(result);



























