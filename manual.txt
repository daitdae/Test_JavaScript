코딩 자율학습 HTML+CSS+JavaScript

8.1 자바스크립트 코드 작성 방법

8.1.1 HTML 파일과 자바스크립트 연결하기
    내부 스크립트, 외부 스크립트 2가지
    ● 내부 스크립트방법 : 내부 스크립트는 HTML 파일에서 script 태그의 콘텐츠 영역에서 자바스크립트 코드를 작성하는 방법
        <body>
            <script>
                document.write("내부 스크립트 방법");
            </script>
        </body>
    ● 외부 스크립트 방법 : js 확장자로 된 별도의 파일을 생성하고 생성한 파일에 자바 스크립트 코드를 작성한뒤 , HTML과 연결하는 방법
        <body>
          <script src="script.js"></script>
        </body>
    ● script 태그 사용위치
      script 태그는 항상 body 태그의 종료 태그 바로 전에 사용. 이는 내부 외부 모두 동일

8.1.2 자바스크립트 코드 실행하기
    document.write() : 웹브라우저에 텍스트를 표시해 주는 코드
    console.log() : 에디터에서 실행할때

8.2 프로그래밍 시작 전 알아두기

8.2.1 주석
    한줄만 주석일때 : //
    여러줄 주석: /* */

8.2.2 자바스크립트 오류 확인 방법
    컴파일 방식과 인터프리터 방식이 있다
    컴파일 방식: 코드를 실행하기 전에 모든 코드를 컴퓨터가 이해할 수 있는 기계어로 한번 변환한 후 실행
    인터프리터 방식 : 코드를 한번에 한줄씩 실행하는 방식
    자바스크립트는 인터프리터 방식 : 오류가 발생한 시점과 줄번호를 알려주고 오류 발생시점부터 실행을 멈춘다.
    자바스크립트에서 오류가 발생하면 크롬의 개발자 도구에서 확인 가능

----------------------------------------------------------------------------------------------------------------------------
마무리
1. 자바스크립트 코드 작성 방법
    1) 자바 스크립트를 웹 브라우저에 적용하는 방법은 크게 2가지
        내부스크립트 방법 : HTML문서안에서 script 태그의 콘텐츠 영역에 자바 스크립트 코드를 작성하는 방법
        외부스크립트 방법 : 별도의 js확장자 파일을 만들어 자바스크립트 코드를 작성하고 이 파일을 HTML 문서에서 script태그로 연결하는 방법
        script 태그의 사용 위치 : script 태그는 웹 브라우저에 화면이 표시되는 것에 영향을 미치지 않도록 body 태그가 끝나기 전에 사용
    2) 자바 스크립트를 단순히 실행할 목적이라면 웹브라우저의 개발자 도구에서 지원하는 콘솔창 활용하기, VSCode의 Code Runner 확장 프로그램 활용하기

2. 주석
    1) 한줄주석은 //
    2) 여러줄 주석은 /* */

3. 오류 확인 방법
    자바스크립트는 코드가 한번에 한줄씩 실행되는 인터프리터 기반의 언어.
    그래서 오류가 발생하면 그 즉시 실행을 멈추고 오류가 발생한 줄 번호를 웹브라우저의 콘솔창에 출력
    따라서 모든 오류 관련 메세지는 웹브라우저의 콘솔창에서 확인 할 수 있음. (~329)　　
----------------------------------------------------------------------------------------------------------------------------

9.1 변수와 상수
    데이터를 저장하는 공간을 변수와 상수라고 한다

9.1.1 변수
    변수는 변하는 수

         식별자     표현식<-값(30)
    var   num   =   10 + 20 ;
    키워드      연산자

    ● 키워드
      어떤 역할이나 기능이 정해진 특별한 단어. 다른말로는 '예약어' 라고도 한다.
    ● 식별자
      내부에서 변수, 함수 등에 부여되는 이름을 의미, 키워드는 식별자로 사용할 수 없음
    ● 연산자
      이름 그대로 어떠한 연산작업을 하는데 사용하는 기호
      = 기호는 우변에 있는 데이터를 좌변에 할당하는 역할을 하기 때문에 할당연산자라고 한다
    ● 표현식
      평가(표현식을 실행해 하나의 값을 만드는 과정)되어 하나의 값을 반환하는 식 또는 코드
    ● 값
      더 이상 평가 할수 없는 데이터
    ● 세미콜론
      하나의 문법이 끝났음을 의미
    ● 선언, 할당, 초기화
      변수를 생성하고 값을 저장하는 문법에서 var 키워드나 let, const 키워드를 사용해 변수의 식별자를 지정하는
      행위를 '변수를 선언한다' 라고한다.
      그리고 할당 연산자인 = 기호로 우변에 있는 값을 변수 공간에 대입(저장)하는 것을 '값을 할당한다' 라고 한다.
      변수는 초기에 값을 할당하지 않고 선언만 할 수 있다
      ex) var num;
      또 선언과 할당을 한번에 하면 '변수를 초기화한다'고 한다
      var num = 10 + 20 ; //변수 num을 초기화한다

9.1.2 새로운 변수 선언 키워드 let
    let num = 10 + 20;

    var와 let의 차이
    1. 변수명 중복이 불가능하다
       var는 중복해서 생성가능
             var num = 10 + 20;
             var num = 50;
       이렇게 하면 기존에 할당된 10+20이라는 데이터가 사라지고 50이라는 새로운 값이 할당된다
       let의 경우 밑에 처럼하면 에러난다.
             let num = 10+20;
             let num = 50;

    2. 호이스팅되지 않는다
       호이스팅은 var 키워드로 변수를 선언하고 할당했을 때, 변수 선언을 자바스크립트의 스코프 맨위로 올려 실행하는 것을 말한다
             console.log(num)
             var num = 10;
             결과 : undefinded
         오류가 발생해야 맞지만 오류가 아니라 undefined를 출력한다 이유는?
             var num; // 선언이 최상위로 올라옴
             console.log(num)
             num = 10; // 할당은 원래 자리에 있음
         호이스팅에 의해 선언부가 최상위로 올라간다 그러나 let에서는 호이스팅이 일어나지 않는다
         같은 코드를 작성하고 실행하면 num변수가 정의되지 않았다는 오류가 발생한다.

9.1.3 상수
    변수를 선언할 때 사용하는 키워드로 const도 있다
    기본은 let과 같다
    다른점은 const는 재할당이 안된다는 것이다

    상수는 보통 변하지 않는수를 의미 const는 재할당이 안되는 특징때문에 상수변수를 선언할때 사용하는 키워드라고 하기도한다.
    예를들어 다음과 같이 let키워드는 변수를 선언하고 다른값으로 재할당 할 수 있다
        let num = 0;
        num = 30;
        console.log(num);
        //실행결과 30

    그러나 const 키워드는 재할당할 수 없어서 오류가 발생한다.
        const num = 10;
        num = 30;
        console.log(num);
    TypeError: Assignment to constant variable.

    재할당이 안되기 때문에 선언을 먼저하고 할당을 나중에 하는 것도 안된다.
        const num; // 선언을 먼저 하고
        num = 10; // 할당을 나중에 해도 오류가 난다.
    SyntaxError: Missing initializer in const declaration

9.1.4 식별자 명명 규칙
    표기법                   설명                      예
    카멜표기법        변수명과 함수명 작성시 사용      firstName,lastName
    언더스코어표기법    상수명 작성 시 사용           FIRST_NAME, last_name
    파스칼표기법       생성자 함수명 작성 시 사용     FirstName, LastName

9.2 자료형
    기본자료형과 참조자료형으로 구별
    기본자료형 : 문자, 숫자, 논리, undefined, null, symbol
    참조자료형 : 객체

9.2.1 문자열
    큰 따옴표나 작은따옴표로 둘러싸인 값의 형태
        let string1 = 'Hello, World';
        let string2 = "Hello, World";
    문자열 데이터를 정의할때 큰따옴표로 시작했으면 큰따옴표로 끝나야 하고 작은 따옴표로 시작했으면 작은따옴표로 끝나야한다.

        ● 문자열에 따옴표가 포함된 경우
            작성하려는 문자열에 퐇마되지 않은 따옴표로 문자열을 감싸서 정의
            문자에 작은 따옴표가 포함되어있다면 큰따옴표로 감싸고 큰따옴표가 포함되어있다면 작은따옴표로 감싼다.
                let string1 = '문자열은 큰따옴표(")로 감싸면 된다'
                let string2 = "문자열은 큰따옴표(')로 감싸면 된다";
            그러나 문자열에 작은 따옴표가 둘다 포함되어 있다면 이걸로 해결되지 않는다.
            그럴때 문자열 연결연산자(+) 또는 이스케이프 문자로 해결

        ● 문자열 연결 연산자
            let string = ' 문자열 ' + " 연결 연산자 "; // 문자열 연결 연산자
            let string = '문자열은 큰따옴표(")나' + "작은따옴표(')로 감싸면 된다."; // 잇문자열은 큰따옴표(")나작은따옴표(')로 감싸면 된다.

         ● 이스케이프 문자
            웹브라우저는 문자열에 들어있는 큰따옴표나 작은따옴표에 역슬래시를 붙이면 일반적인 따옴표로 인식한다.
            let string = '문자열은 큰따옴표(")나 작은따옴표(\')로 감싸면 된다';
            // 문자열은 큰따옴표(")나 작은따옴표(')로 감싸면 된다

            이스케이프 문자          설명
            \'                  작은따옴표
            \"                  큰따옴표
            \n                  줄바꿈
            \t                  수평 탭
            \\                  역슬래시

            let string = "이스케이프 문자를 이용해서\n줄 바꿈하고 싶어";
            // 이스케이프 문자를 이용해서
               줄 바꿈하고 싶어

         ● 템플릿 문자열
            백틱(``) : 1옆에 있는거 영어일때만 나옴
            기준 문자열 정의 방식처럼 큰 따옴표나 작은 따옴표로 문자열을 정의하지 않기 때문에 문자열에 큰따옴표나 작은 따옴표가 있어도 영향을 받지 않는다.
            템플릿 문자열의 특징
             1. enter를 눌렀을때 줄바꿈이 적용된다. 그래서 이스케이프 문자안써도 된다
                    let string = `문자열은 큰따옴표(")나
                    작은따옴표(')로 감싸면 된다`
                    // 문자열은 큰따옴표(")나
                       작은따옴표(')로 감싸면 된다
             2. ${} 문법을 이용해 문자열에 변수 또는 식을 넣을 수 있다.
                외부에 미리 정의한 변수 또는 표현식을 넣어 연산한 값을 변수에 할당
                    let dan = 3;
                    let gugu = 8;
                    let string = `${dan} 곱하기 ${gugu}은 ${dan * gugu}입니다.`;
                    // 3 곱하기 8은 24입니다.

9.2.2 숫자형
    정수와 실수를 구분하지않고 하나의 자료형으로 취급
        let num1 = 10;
        let num2 = 0.1;
        // 10
           0.1
    그러나 실수를 사용할 때는 주의해야함 실수를 부동 소수점 방식으로 표현하면 실수 계산이 정확하지 않다.
        let sum = 0.1 + 0.2;
        // 0.30000000000000004

9.2.3 논리형
    true, false
        let boolean1 = 10 < 20;
        let boolean2 = 10 > 20;
        // true
           false

9.2.4 undefined
    변수나 상수를 메모리 공간에 선언하면 반드시 생성한 공간에 저장할 데이터를 할당해야한다.
    할당하지 않을경우 자바스크립트 내부적으로 변수와 상수공간에 임시로 데이터를 할당하는데, 이때 할당되는값이 undefined
    사용자가 임의로 정의하고 할당하는 자료형이 아니다.
        let empty;
        console.log(empty); // undefined

9.2.5 null
    null자료형은 null값하나만 있다. 변수나 상수를 선언하고 의도적으로 선언한 공간을 비워 둘때 할당한다.
        let empty = null;
        console.log(empty); //null

9.2.6 객체
    배열, 객체 리터럴, 함수가 있다.
        ● 배열
            배열로 정의한 데이터를 '요소'라고 한다.
            그리고 배열 요소에 접근하려면 '인덱스'를 사용한다.
                let studentScore = [80, 70, 90,60]; // 국어, 영어, 수학, 과학 점수
                console.log(studentScore[1]); //70, 1번 인덱스의 데이터에 접근
            배열은 모든 자료형을 저장할 수 있다.

        ● 객체 리터럴
            객체를 정의하는 가장 간단한 방법. 중괄호를 사용.
            중괄호 안에는 키(key)와 값(value)의 한쌍으로 이루어진 속성(property)이 들어간다
                {
                         속성
               키 →    key1:value1  ← 값
               키 →   ,key2:value2  ← 값
                         속성
                }
            값을 키로 구분한다는 장점이 있다.
            키가 있기때문에 각 값의 의미를 바로 파악할 수 있다.
                let studentScore = {
                    koreanScore: 80
                    , englishScore: 70
                    , mathScore: 90
                    , scienceScore: 60
                };
                console.log(studentScore.koreanScore);     //80
                console.log(studentScore['englishScore']); //70

9.3 연산자
    이항산술연산자(+,-,*,/,%,**)
        ** : x ** y x와 y의 거듭제곱을 구한다.
    단항부정
        - : -x x의 부호를 보정한다(음수면 양수로 양수면 음수로)

9.3.3 비교 연산자
    연산자         예               설명
    ==         x == y    x와 y의 값이 같으면 true를 반환
    ===        x === y   x와 y의 자료형이 같으면 true를 반환
    !==        x !== y   x와 y의 값과 자료형이 다르면 true를 반환

9.3.4 논리 연산자
    연산자         예               설명
     !           !x    x가 참이면 false를 반환하고 거짓이면 true를 반환한다

9.3.7 형 변환
    데이터의 자료형이 다른 자료형으로 바뀌는 것
    암시적 형변환과 명시적 형변환이 있다.

        ● 암시적형변환
            const result = 10 + "10";
            console.log(result); //1010
          자바스크립트가 내부적으로 숫자형 데이터를 문자열 데이터로 형 변환했기 때문
          암시적 형 변환은 사용자가 의도하지 않았지만 자바스크립트에서 자체적으로 형변환 하는 것
          은근 많이씀
            let num = 10;
            let strNum = "10";
            if(num == strNum){ //문자열을 숫자형으로 형 변환
                console.log('equals');
            } //equals

        ● 명시적 형변환
            드러나게 형변환을 처리하는 것
            예를 들어 다음처럼 String()메서드를 사용하면 문자열을 숫자형으로 명시적 형 변환을 할 수 있다.
                let num = 10;
                let strNum = "10";
                if (String(num) == strNum){
                    console.log('equals'); //equals
                }

9.5.6 for...in
    형식
        for(가변수 in 배열/객체 리터럴){
        // 블록문
        }
    for문안의 소괄호 안에 in키워드를 두고 키워드의 오른쪽에는 탐색의 대상이 되는 배열 또는 객체리터럴
    왼쪽에는 배열 또는 객체리터럴을 탐색해서 키를 저장할 가변수(임시변수)를 놓는다.

    ● 객체리터럴을 반복할 경우
        let obj = {name:"철수", age:"20"};
        for (let key in obj){
            console.log(key + ": ", obj[key]);
        }
      for in 문으로 객체 리터럴을 반복 탐색하면 탐색 결과로 가변수에 객체 리터럴의 키가 할당되어 객체 리터럴의 키와 값을 출력할 수 있다.

    ● 배열을 반복할 경우
        let arr = ["orange","apple","banana"];
        for (let index in arr){
            console.log(index +": " + arr[index]);
        }
        // 0: orange
        // 1: apple
        // 2: banana
-----------------------------------------------------------------------------------------------------------------------
마무리
    1. 변수와 상수 변수
        자바스크립트에서 데이터를 저장할 수 있는 공간을 변수와 상수 변수라고 한다.
        변수는 변할 수 있는 데이터를 저장하는 공간,
        상수변수는 재할당할 수 없는 데이터를 저장하는 공간
    2. 자료형
        기본자료형
            문자열: 큰따옴표나 작은따옴표로 둘러싸인 값
            숫자형: 정수, 실수를 포함한 모든 숫자
            논리형: 논리값 (true, false)
            undefined: 변수에 아무런 값도 할당되지 않는 상태를 나타내는 값
            null: 변수를 의도적으로 비워두기 위해 사용하는 값
        참조자료형
            객체: 배열, 함수, 객체리터럴 등으로 파생되는 상위자료형
    3. 연산자
        + - * / % ** ++ -- = += -= == != 등등
    4. 연산자 우선순위
        필요하면 인터넷 검색
    5. 조건문
        if, switch
    6. 반복문
        while, do...while, for, for...in
    7. break, continue
        반복문을 종료할때 break, 건너뛰게 할때는 continue
-----------------------------------------------------------------------------------------------------------------------

10.1 함수란?
    어떤목적을 가지고 작성한 코드를 모아 둔 블록문이다.
    코드를 함수로 만들면 함수를 호출해 함수내부에 모아 둔 여러줄의 코드를 한번에 실행할 수 있다.
    그래서 여러곳에서 재사용하기가 편하다.























